Shaurya Jauhari 1/15/2025 11:07 AM â€¢ DATA (employees.txt)

1001 John Doe Accounting 50000 2015-01-10 ACC01
1002 Jane Smith HR 60000 2017-03-22 HR02
1003 Sam Johnson IT 55000 2018-07-15 IT03
1004 Lisa Brown Finance 70000 2012-11-20 FIN04
1005 Michael White Marketing 45000 2019-05-30 MKT05
1006 Susan Green Operations 50000 2014-06-18 OPS06
1007 Tim Blue Sales 65000 2016-09-05 SAL07
1008 Anna Black Research 60000 2013-12-01 RES08
1009 Peter Grey Support 58000 2020-02-25 SUP09

PROBLEM STATEMENTS

1. Find all employees hired before 2016 and display their details.
cat employees.txt | grep -f <(cat employees.txt | cut -d ' ' -f6 | grep -E '^[1-2][0-9]{2}[0-5]')

2. Display all employees with a salary between 50000 and 60000.
cat employees.txt | grep -f<(cat employees.txt | cut -d ' ' -f5 | grep -E '^(50000|5[0-9]{4}|60000)$')

3. Replace all instances of the word "Support" with "Customer Support" and save the output to a new file updated_employees.txt.
file_content=$(cat employees.txt) && echo "${file_content//Support/Customer Support}" > upgraded_employees.txt && cat upgraded_employees.txt

4. Extract and display only the employee names (second and third columns) and their hire dates (sixth column).
cut -d ' ' -f2,3,6 employees.txt

5. Find all employees whose department code starts with 'A' and display their details.
cat employees.txt | grep -f <(cut -d ' ' -f4 employees.txt | grep '^A')

6. Sort the contents of employees.txt by hire date in ascending order.
sort -t ' ' -k 6 employees.txt

7. Display the name and department of the employee with the highest salary.
sort -r -t " " -k5 employees.txt | head -n 1 | cut -d " " -f2,3,4

8. Count the number of employees in each department and display the department name along with the count.
cut -d " " -f4 employees.txt | sort | uniq -c

9. Display the details of employees whose names contain the letter 'n' (case-insensitive).
cat employees.txt | grep -f <(cut -d ' ' -f2,3 employees.txt | grep -i 'n')


---------------------------------------------------------------------------------------------------------------------------------------

Unix Shell Scripting problems

1. Write a shell function that checks if a given number is prime.

#!/bin/bash

is_prime() {
        local n=$1

        if [ $n -lt 2 ]; then
                echo "$n not a prime number"
                exit 1
        fi

#       Squaring 'i' instead of square root 'n'
#       for ((i=2; i*i <= n; i++)) ; do
#               if [ $((n % i)) -eq 0 ] ; then
#                       echo "$n not a prime number"
#                       exit 1
#               fi
#       done

#       Sqrt 'n' the loop from 2 to 'n'
        num_sqrt=$(echo "scale=0; sqrt($n)" | bc)
        for i in $(seq 2 $num_sqrt); do
                if [ $((n % i)) -eq 0 ]; then
                        echo "$n not a prime number"
                        exit 1
                fi
        done

        echo "$n is prime number"
        exit 0

        #n=$(echo "scale=2; sqrt($1)" | bc)
        #echo "$n"
}

read -p "Enter number: " num

is_prime $num

-------------------------------------------------------------------------------------------

2. Write a script that renames all files with a specified extension in a directory. For example, "example.txt" would be renamed to "example.new.txt".

#!/bin/bash

rename_files() {

        if [ "$#" -ne 1 ]; then
                echo "Usage: $0"
                exit 1
        fi

        local dir=$1

        if [ ! -d "$dir" ]; then
                echo "Error: Directory $dir does not exist."
                exit 1
        fi



        for file in "$dir/"* ; do
                if [ -f "$file" ] ; then
                        basename=$(basename "$file")

                        if [[ $basename =~ '.new' ]] ; then
                                continue
                        fi

                        file_name=$(basename "$file")
                        mid_ext=".new."
                        new_file_name="$dir/${file_name%.*}$mid_ext${file_name##*.}"
                        cp $file $new_file_name
#                       rm -f $file
                fi
        done

}

read -p "Enter directory path: " dir_path

rename_files $dir_path

-------------------------------------------------------------------------------------------

3. Write a shell script to create an array of five fruites and print each fruit using a loop.

#!/bin/bash

read -p "Enter no. of fruits to add: " num

for i in $(seq 1 $num); do
	read -p "Fruit $i: " fruit
	fruits+=("$fruit")
done

for fruit in "${fruits[@]}"; do
	echo "$fruit"
done

-------------------------------------------------------------------------------------------

4. Write a shell function that calculates the factorial of a given number.

#!/bin/bash

factorial() {
        local n=$1
        local result=1

#       for ((i=n; i>1; i--)); do
#               result=$((result * i))
#       done

        while [ $n -gt 1 ]; do
                result=$((result * n))
                n=$((n - 1))
        done

        echo $result
}

read -p "Enter : " num

factorial $num

------------------------------------------------------------------------------------------

5. Write a command that extracts the contents of a specified CPIO archive.
cpio -idv "archive_file"


------------------------------------------------------------------------------------------

6. Write a shell function that calculates the GCD of two given numbers.
#!/bin/bash

find_gcd() {
        local n1=$1
        local n2=$2

        echo "GCD numbers are $n1 and $n2"

        while [ $n2 -ne 0 ]; do
                local temp=$n2
                n2=$((n1 % n2))
                n1=$temp
        done
        echo "GCD is: $n1"
}

read -p "Enter 1st number: " num1
read -p "Enter 2nd number: " num2

find_gcd $num1 $num2

------------------------------------------------------------------------------------------

7. Write a shell function that checks if a specified directory exists and prints a message accordingly.

#!/bin/bash

exist_check() {
	if [ "$#" -ne 1 ]; then
                echo "Usage: $0"
                exit 1
        fi

	local dir=$(eval echo "$1")

        if [ ! -d "$dir" ]; then
                echo "Error: Directory $dir does not exist."
                exit 1
	else
		echo "$dir directory does exist."
        fi

}

read -p "Enter directory path: " dir_path

exist_check $dir_path

-----------------------------------------------------------------------------------------

8. Write a shell script to check if a given string is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward.

#!/bin/bash

check_palindrome() {
	if [ "$#" -ne 1 ];  then
		echo "Usage: $0"
		exit 1
	fi

	local str="$1"
	local revStr=$(echo "$str" | rev)

	if [ "$str" != "$revStr" ]; then
		echo "$str is not palindrome"
	else
		echo "$str is palindrome"
	fi


#	strLen=${#str}
#
#	for (( i=0, j=strLen-1; i<j; i++, j-- )); do
#		if [ "${str:i:1}" != "${str:j:1}" ]; then
#			echo "$str is not a palindrome"
#			exit 1
#		fi
#	done
#
#	echo "$str is palindrome"

}

read -p "Enter: " inputStr

check_palindrome $inputStr




------------------------------------------------------------------------------------------

9. Write a shell script to check if a given number is a magic number. A magic number is a number that eventually leads to 1 when replaced by the sum of its digits repeatedly.

#!/bin/bash
sum_of_digits() {
        num=$1
        sum=0

        while [ $num -gt 0 ]; do
                digit=$((num % 10))
                sum=$((sum + digit))
                num=$((num / 10))
        done
        echo $sum
}


is_magic_number() {
        num=$1

        while [ $num -gt 9 ]; do
                num=$(sum_of_digits $num)
        done

        if [ $num -eq 1 ]; then
                echo "Magic number"
        else
                echo "Not a magic number"
        fi
}

read -p "Enter a number: " number

is_magic_number $number


------------------------------------------------------------------------------------------

10. Write a shell script that creates a tar archive of all files in a specified directory, sets specific permissions (read and execute, for all) for the archive, and then extracts the contents of the archive to a new location while retaining the original permissions.

#!/bin/bash
create_tar_archive() {
	local path=$1
	
	echo $path | pwd	
}

read -p "Enter directory path: " path

create_tar_archive $path





